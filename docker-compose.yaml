version: "3.6"

x-environment-defaults: &default-environment
  environment:
    - DEBUG
    - DB_PASS
    - DB_USER
    - DB_NAME
    - DB_PORT
    - DB_HOST
    - DOMAIN
    - SECRET_KEY
    - ALLOWED_HOSTS
    - API_KEY
    - API_NAME
    - ADMIN_URL
    - EMAIL
    - EMAIL_TOKEN
    - CELERY_BROKER
    - TELEGRAM_TOKEN
    - TARGET_CHAT_ID
    - CSRF_TRUSTED_DOMAINS
    - SENTRY_DNS
    - DNS
    - ALLOWED_CHATS
    - EMAIL_SENDER
    - EMAIL_SENDER_TOKEN


services:
  postgres:
    container_name: postgres
    image: postgres:14.3-alpine
    restart: always
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 127.0.0.1:15432:5432
#    logging:
#      driver: journald
#      options:
#        tag: postgres
    networks:
      - web


  pgbackups:
    container_name: backup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backup:/backups
    links:
      - postgres:postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_EXTRA_OPTS=-Z9 -E UTF-8 --schema=public --blobs
      - SCHEDULE=@weekly
      - BACKUP_KEEP_WEEKS=2
#    logging:
#      driver: journald
#      options:
#        tag: pgbackups
    networks:
      - web


  backend:
    container_name: backend
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - ./static:/usr/src/app/static/
      - ./media:/usr/src/app/media/
      - /var/run/docker.sock:/var/run/docker.sock
    <<: *default-environment
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c /tmp/entrypoint.sh
#    logging:
#      driver: journald
#      options:
#        tag: backend
    networks:
      - web


  redis:
    image: redis:latest
    container_name: redis
    depends_on:
      - postgres
    restart: always
#    logging:
#      driver: journald
#      options:
#        tag: redis
    networks:
      - web


  celery_send_mails:
    container_name: celery_send_mails
    build: ./backend
    user: nobody
    depends_on:
      - backend
      - redis
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - ./static:/usr/src/app/static/
      - ./media:/usr/src/app/media/
    <<: *default-environment
    command: celery -A config worker -l error -E -c 2 -Q send_mail
#    logging:
#      driver: journald
#      options:
#        tag: celery_send_mails
    networks:
      - web


  celery_send_many_mails:
    container_name: celery_send_many_mails
    build: ./backend
    user: nobody
    depends_on:
      - backend
      - redis
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - ./static:/usr/src/app/static/
      - ./media:/usr/src/app/media/
    <<: *default-environment
    command: celery -A config worker -l error -E -c 2 -Q send_many_mails
#    logging:
#      driver: journald
#      options:
#        tag: celery_send_many_mails
    networks:
      - web

#
#  flower:
#    container_name: flower
#    build: ./backend
#    command: celery flower --basic_auth=${FLOWER_USER}:${FLOWER_PASS} --port=6666
#    environment:
#      - CELERY_BROKER_URL=${CELERY_BROKER}
#      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
#      - FLOWER_PORT=6666
#    expose:
#      - 6666
#    depends_on:
#      - redis
#      - celery_send_mails
#    restart: always
#    logging:
#      driver: journald
#      options:
#        tag: flower
#    networks:
#      - web


  tgbot:
    container_name: tgbot
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - ./static:/usr/src/app/static/
      - ./media:/usr/src/app/media/
      - /var/run/docker.sock:/var/run/docker.sock
    <<: *default-environment
    depends_on:
      - backend
      - postgres
    command: sh -c 'uvicorn apps.tgbot.fastapp:app --host 0.0.0.0 --port 5555 & python -m apps.tgbot.main'
    ports:
      - "5555:5555"
#    logging:
#      driver: journald
#      options:
#        tag: tgbot
    networks:
      - web


  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    links:
      - backend:backend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/usr/src/app/static/
      - ./media:/usr/src/app/media/
#    logging:
#      driver: journald
#      options:
#        tag: nginx
    networks:
      - web


#  loki:
#    image: grafana/loki:latest
#    container_name: loki
#    restart: always
#    ports:
#      - "3100:3100"
#    networks:
#      - web


#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    restart: always
#    expose:
#      - 3000
#    depends_on:
#      - loki
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=${FLOWER_PASS}
#      - GF_SERVER_SERVE_FROM_SUB_PATH=true
#      - GF_SERVER_ROOT_URL=https://${DNS}/grafana/
#    volumes:
#      - grafana_data:/var/lib/grafana
#    networks:
#      - web

#
#  promtail:
#    image: grafana/promtail:latest
#    container_name: promtail
#    build: ./promtail
#    volumes:
#      - /var/log/journal:/var/log/journal:ro
#      - /etc/machine-id:/etc/machine-id:ro
#    command:
#      - '-config.file=/promtail.yml'
#      - '-config.expand-env=true'
#    depends_on:
#      - loki
#    networks:
#      - web


volumes:
  postgresql-data:
  grafana_data:


networks:
  web:
    driver: bridge